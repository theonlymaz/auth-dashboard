===============================================
  PYTHON DASHBOARD PROJECT CHEAT SHEET
  Created: October 27, 2025
  Project: Auth Dashboard with Supabase
===============================================

📁 PROJECT SETUP COMMANDS
===============================================

1. Navigate to Python folder:
   cd ~/Library/Mobile\ Documents/com~apple~CloudDocs/Python 

2. Create new project:
   mkdir your-project-name
   cd your-project-name

3. Create virtual environment:
   python3 -m venv venv
   
   WHY? Creates isolated space for this project's packages

4. Activate virtual environment:
   source venv/bin/activate
   
   YOU'LL SEE: (venv) appear in terminal
   
5. Deactivate when done:
   deactivate

📦 INSTALL PACKAGES
===============================================

For Dashboard Projects:
   pip install streamlit supabase python-dotenv

For Data Science:
   pip install pandas numpy matplotlib

For Web APIs:
   pip install flask fastapi

For AI:
   pip install openai anthropic langchain

See all installed packages:
   pip list

Save your packages list:
   pip freeze > requirements.txt

Install from requirements.txt:
   pip install -r requirements.txt

📄 CREATE PROJECT FILES
===============================================

Create essential files:
   touch app.py .env .gitignore README.md

What each file is for:
   app.py        → Your main Python code
   .env          → Secret keys (API keys, passwords)
   .gitignore    → Tell Git what NOT to upload
   README.md     → Project documentation

🔧 VS CODE COMMANDS
===============================================

Open project in VS Code:
   code .

Open specific file:
   code app.py

▶️ RUN YOUR PROJECT
===============================================

Run Streamlit app:
   streamlit run app.py

Run regular Python file:
   python app.py

Run with Python 3 specifically:
   python3 app.py

Stop running app:
   Press Ctrl + C in terminal

🔐 ENVIRONMENT VARIABLES (.env file)
===============================================

Format:
   VARIABLE_NAME=value
   API_KEY=sk-1234567890
   DATABASE_URL=https://example.com

In Python code:
   import os
   from dotenv import load_dotenv
   
   load_dotenv()
   my_key = os.getenv("API_KEY")

💾 GIT COMMANDS (Version Control)
===============================================

First time setup in project:
   git init
   git add .
   git commit -m "Initial commit"

Daily workflow:
   git status                    # Check what changed
   git add .                     # Stage all changes
   git commit -m "Description"   # Save changes
   git push                      # Upload to GitHub

Create GitHub repo:
   gh repo create project-name --public
   git push -u origin main

Clone existing repo:
   git clone https://github.com/username/repo.git

🚫 .gitignore FILE
===============================================

Add these to EVERY Python project:

venv/              # Virtual environment (too big)
.env               # Secrets (NEVER share!)
__pycache__/       # Python cache (auto-generated)
*.pyc              # Compiled Python files
.DS_Store          # Mac hidden file (annoying)
*.log              # Log files
.vscode/           # VS Code settings (optional)

📊 STREAMLIT SPECIFIC
===============================================

Basic Streamlit commands:
   st.title("My Title")           # Big heading
   st.header("Section")            # Medium heading
   st.write("Text")                # Regular text
   st.success("Success!")          # Green box
   st.error("Error!")              # Red box
   st.warning("Warning!")          # Yellow box
   st.info("Info")                 # Blue box

Input widgets:
   st.text_input("Label")          # Text box
   st.button("Click me")           # Button
   st.selectbox("Pick", options)   # Dropdown

Run locally:
   streamlit run app.py

Deploy to Streamlit Cloud:
   1. Push code to GitHub
   2. Go to share.streamlit.io
   3. Connect repo
   4. Click Deploy

🗄️ SUPABASE SETUP
===============================================

1. Get credentials from supabase.com:
   - Project URL
   - anon/public key

2. Add to .env file:
   SUPABASE_URL=https://xxx.supabase.co
   SUPABASE_KEY=eyJhbGc...

3. Connect in Python:
   from supabase import create_client
   import os
   
   supabase = create_client(
       os.getenv("SUPABASE_URL"),
       os.getenv("SUPABASE_KEY")
   )

🐛 TROUBLESHOOTING
===============================================

Command not found?
   → Make sure virtual environment is activated
   → Should see (venv) in terminal

Module not found?
   → Install it: pip install module-name
   → Check you're in right environment

Port already in use?
   → Kill process: lsof -ti:8501 | xargs kill -9
   → Or use different port: streamlit run app.py --server.port 8502

Can't connect to Supabase?
   → Check .env file has correct credentials
   → Make sure load_dotenv() is called
   → Verify credentials in Supabase dashboard

🎯 PROJECT WORKFLOW (THE BIG PICTURE)
===============================================

SETUP (Once per project):
   1. Create project folder
   2. Create virtual environment
   3. Activate environment
   4. Install packages
   5. Create files (app.py, .env, .gitignore)
   6. Initialize Git
   7. Open in VS Code

DEVELOPMENT (Daily):
   1. Activate environment: source venv/bin/activate
   2. Code in VS Code
   3. Test locally: streamlit run app.py
   4. Save changes: git add . && git commit -m "message"
   5. Push to GitHub: git push

DEPLOYMENT (When ready):
   1. Push final version to GitHub
   2. Deploy to Streamlit Cloud
   3. Connect custom domain (optional)
   4. Share with world! 🚀

📁 TYPICAL PROJECT STRUCTURE
===============================================

my-project/
├── venv/                 # Virtual environment (don't touch)
├── .env                  # Secret keys (don't commit!)
├── .gitignore            # Git ignore rules
├── app.py                # Main application
├── requirements.txt      # Package list
├── README.md             # Documentation
└── pages/                # Multiple pages (optional)
    ├── home.py
    └── settings.py

💡 IMPORTANT CONCEPTS
===============================================

Virtual Environment:
   → Isolated space for each project's packages
   → Like separate toolboxes for each project
   → Prevents package conflicts between projects

Local vs Deployed:
   → Local: Runs on your computer only
   → Deployed: Live on internet, anyone can access

Environment Variables:
   → Sensitive info (API keys, passwords)
   → Never put directly in code
   → Always use .env file
   → Never commit .env to Git!

📚 USEFUL TERMINAL TIPS
===============================================

Clear terminal:
   clear   (or Cmd + K)

See current directory:
   pwd

List files:
   ls      (or ls -la for detailed)

Go up one folder:
   cd ..

Go to home directory:
   cd ~

Create folder:
   mkdir folder-name

Delete file:
   rm filename

Delete folder:
   rm -rf foldername   (BE CAREFUL!)

🔄 STARTING NEW PROJECT (QUICK VERSION)
===============================================

cd ~/Library/Mobile\ Documents/com~apple~CloudDocs/Python
mkdir new-project && cd new-project
python3 -m venv venv
source venv/bin/activate
pip install streamlit supabase python-dotenv
touch app.py .env .gitignore
echo "venv/
.env
__pycache__/
*.pyc
.DS_Store" > .gitignore
code .
git init

🎓 REMEMBER
===============================================

1. ALWAYS activate virtual environment before working
2. NEVER commit .env file to Git
3. Add .gitignore BEFORE first commit
4. Test locally BEFORE deploying
5. Save work regularly with Git commits
6. Use descriptive commit messages
7. Ask for help when stuck!

===============================================
  NEXT STEPS FOR YOUR DASHBOARD
===============================================

Phase 2 (Evening):
   □ Build login/signup page
   □ Create home dashboard
   □ Add settings page
   □ Style it beautifully
   □ Deploy to Streamlit Cloud
   □ Connect veronx.com domain

You've got this! 🚀

===============================================
  QUICK REFERENCE: MUST-KNOW COMMANDS
===============================================

Start project:     source venv/bin/activate
Run app:           streamlit run app.py
Save work:         git add . && git commit -m "message"
Stop app:          Ctrl + C
Open VS Code:      code .
Install package:   pip install package-name

===============================================
